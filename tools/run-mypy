#!/usr/bin/env python3

import os
import sys
import argparse
import subprocess
import lister
from typing import cast, Dict, List
from pathlib import PurePath

TOOLS_DIR = os.path.dirname(os.path.abspath(__file__))
os.chdir(os.path.dirname(TOOLS_DIR))

sys.path.append(os.path.dirname(TOOLS_DIR))

parser = argparse.ArgumentParser(description="Run mypy on files tracked by git.")
parser.add_argument('targets',nargs="*", default=[],help="""files and directories to include in the result.
                    If this is not specified, the current directory is used""")
parser.add_argument('-m','--modified', action = 'store_true', help = 'All modified files.',default = False)
parser.add_argument('-a','--all', action = 'store_true')
parser.add_argument('--quick', action='store_true', default=False,
                    help="Use the quick flag with mypy" )
parser.add_argument('--ignore-missing-imports', dest='ignore_missing_imports', action='store_true', default=False,
                    help="Use the --ignore-missing-imports flag with mypy")
parser.add_argument('--no-ignore-missing-imports', dest='ignore_missing_imports', action='store_false', default=True,
                    help="""Don't use the --ignore-missing-imports flag with mypy""")


args = parser.parse_args()
exclude = []

if args.all:
    exclude = []

files_dict = cast(Dict[str,List[str]],
             lister.list_files(targets = args.targets,ftypes=['py'],
                               use_shebang=True, modified_only=args.modified,
                               exclude = exclude +['stubs'], group_by_ftype=True,
                               ))

python_files = [fpath for fpath in files_dict['py']]

if not python_files:
    print("There are no files to run mypy on.")
    sys.exit(0)

rep_python_files = {}
rep_python_files['zulipterminal'] = []
for file_path in python_files:
    rep = PurePath(file_path).parts[0]
    if rep in rep_python_files:
        rep_python_files[rep].append(file_path)

mypy_command = "mypy"

extra_args = []


if args.quick:
    extra_args.append("--quick")

# run mypy
status = 0
for rep, python_files in rep_python_files.items():
    print("Running mypy for `{}`".format(rep))
    if python_files:
        result = subprocess.call([mypy_command] + extra_args + python_files)
        if result != 0:
            status = result
    else:
        print("There are no files to run mypy on.")
sys.exit(status)
